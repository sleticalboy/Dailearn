// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: algo_args.proto

#include "algo_args.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR AlgoInput_IargsEntry_DoNotUse::AlgoInput_IargsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AlgoInput_IargsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgoInput_IargsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgoInput_IargsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AlgoInput_IargsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgoInput_IargsEntry_DoNotUseDefaultTypeInternal _AlgoInput_IargsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AlgoInput::AlgoInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iargs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlgoInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgoInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgoInputDefaultTypeInternal() {}
  union {
    AlgoInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgoInputDefaultTypeInternal _AlgoInput_default_instance_;
PROTOBUF_CONSTEXPR AlgoOutput_OargsEntry_DoNotUse::AlgoOutput_OargsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AlgoOutput_OargsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgoOutput_OargsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgoOutput_OargsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AlgoOutput_OargsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgoOutput_OargsEntry_DoNotUseDefaultTypeInternal _AlgoOutput_OargsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AlgoOutput::AlgoOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oargs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlgoOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgoOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgoOutputDefaultTypeInternal() {}
  union {
    AlgoOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgoOutputDefaultTypeInternal _AlgoOutput_default_instance_;
static ::_pb::Metadata file_level_metadata_algo_5fargs_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_algo_5fargs_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_algo_5fargs_2eproto = nullptr;

const uint32_t TableStruct_algo_5fargs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AlgoInput_IargsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AlgoInput_IargsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlgoInput_IargsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AlgoInput_IargsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlgoInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlgoInput, _impl_.iargs_),
  PROTOBUF_FIELD_OFFSET(::AlgoOutput_OargsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AlgoOutput_OargsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlgoOutput_OargsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AlgoOutput_OargsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlgoOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AlgoOutput, _impl_.oargs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::AlgoInput_IargsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::AlgoInput)},
  { 17, 25, -1, sizeof(::AlgoOutput_OargsEntry_DoNotUse)},
  { 27, -1, -1, sizeof(::AlgoOutput)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_AlgoInput_IargsEntry_DoNotUse_default_instance_._instance,
  &::_AlgoInput_default_instance_._instance,
  &::_AlgoOutput_OargsEntry_DoNotUse_default_instance_._instance,
  &::_AlgoOutput_default_instance_._instance,
};

const char descriptor_table_protodef_algo_5fargs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017algo_args.proto\"_\n\tAlgoInput\022$\n\005iargs\030"
  "\001 \003(\0132\025.AlgoInput.IargsEntry\032,\n\nIargsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"a\n\nAl"
  "goOutput\022%\n\005oargs\030\001 \003(\0132\026.AlgoOutput.Oar"
  "gsEntry\032,\n\nOargsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_algo_5fargs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_algo_5fargs_2eproto = {
    false, false, 221, descriptor_table_protodef_algo_5fargs_2eproto,
    "algo_args.proto",
    &descriptor_table_algo_5fargs_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_algo_5fargs_2eproto::offsets,
    file_level_metadata_algo_5fargs_2eproto, file_level_enum_descriptors_algo_5fargs_2eproto,
    file_level_service_descriptors_algo_5fargs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_algo_5fargs_2eproto_getter() {
  return &descriptor_table_algo_5fargs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_algo_5fargs_2eproto(&descriptor_table_algo_5fargs_2eproto);

// ===================================================================

AlgoInput_IargsEntry_DoNotUse::AlgoInput_IargsEntry_DoNotUse() {}
AlgoInput_IargsEntry_DoNotUse::AlgoInput_IargsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AlgoInput_IargsEntry_DoNotUse::MergeFrom(const AlgoInput_IargsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AlgoInput_IargsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algo_5fargs_2eproto_getter, &descriptor_table_algo_5fargs_2eproto_once,
      file_level_metadata_algo_5fargs_2eproto[0]);
}

// ===================================================================

class AlgoInput::_Internal {
 public:
};

AlgoInput::AlgoInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AlgoInput::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:AlgoInput)
}
AlgoInput::AlgoInput(const AlgoInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlgoInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.iargs_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.iargs_.MergeFrom(from._impl_.iargs_);
  // @@protoc_insertion_point(copy_constructor:AlgoInput)
}

inline void AlgoInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.iargs_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlgoInput::~AlgoInput() {
  // @@protoc_insertion_point(destructor:AlgoInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AlgoInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iargs_.Destruct();
  _impl_.iargs_.~MapField();
}

void AlgoInput::ArenaDtor(void* object) {
  AlgoInput* _this = reinterpret_cast< AlgoInput* >(object);
  _this->_impl_.iargs_.Destruct();
}
void AlgoInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlgoInput::Clear() {
// @@protoc_insertion_point(message_clear_start:AlgoInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iargs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgoInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> iargs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.iargs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlgoInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgoInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> iargs = 1;
  if (!this->_internal_iargs().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AlgoInput_IargsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_iargs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AlgoInput.IargsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AlgoInput.IargsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgoInput)
  return target;
}

size_t AlgoInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlgoInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> iargs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_iargs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_iargs().begin();
      it != this->_internal_iargs().end(); ++it) {
    total_size += AlgoInput_IargsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlgoInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlgoInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlgoInput::GetClassData() const { return &_class_data_; }


void AlgoInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlgoInput*>(&to_msg);
  auto& from = static_cast<const AlgoInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgoInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.iargs_.MergeFrom(from._impl_.iargs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlgoInput::CopyFrom(const AlgoInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlgoInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoInput::IsInitialized() const {
  return true;
}

void AlgoInput::InternalSwap(AlgoInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.iargs_.InternalSwap(&other->_impl_.iargs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgoInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algo_5fargs_2eproto_getter, &descriptor_table_algo_5fargs_2eproto_once,
      file_level_metadata_algo_5fargs_2eproto[1]);
}

// ===================================================================

AlgoOutput_OargsEntry_DoNotUse::AlgoOutput_OargsEntry_DoNotUse() {}
AlgoOutput_OargsEntry_DoNotUse::AlgoOutput_OargsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AlgoOutput_OargsEntry_DoNotUse::MergeFrom(const AlgoOutput_OargsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AlgoOutput_OargsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algo_5fargs_2eproto_getter, &descriptor_table_algo_5fargs_2eproto_once,
      file_level_metadata_algo_5fargs_2eproto[2]);
}

// ===================================================================

class AlgoOutput::_Internal {
 public:
};

AlgoOutput::AlgoOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AlgoOutput::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:AlgoOutput)
}
AlgoOutput::AlgoOutput(const AlgoOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlgoOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.oargs_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.oargs_.MergeFrom(from._impl_.oargs_);
  // @@protoc_insertion_point(copy_constructor:AlgoOutput)
}

inline void AlgoOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.oargs_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlgoOutput::~AlgoOutput() {
  // @@protoc_insertion_point(destructor:AlgoOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AlgoOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oargs_.Destruct();
  _impl_.oargs_.~MapField();
}

void AlgoOutput::ArenaDtor(void* object) {
  AlgoOutput* _this = reinterpret_cast< AlgoOutput* >(object);
  _this->_impl_.oargs_.Destruct();
}
void AlgoOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlgoOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:AlgoOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.oargs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgoOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> oargs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.oargs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlgoOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgoOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> oargs = 1;
  if (!this->_internal_oargs().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AlgoOutput_OargsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_oargs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AlgoOutput.OargsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AlgoOutput.OargsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgoOutput)
  return target;
}

size_t AlgoOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlgoOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> oargs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_oargs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_oargs().begin();
      it != this->_internal_oargs().end(); ++it) {
    total_size += AlgoOutput_OargsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlgoOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlgoOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlgoOutput::GetClassData() const { return &_class_data_; }


void AlgoOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlgoOutput*>(&to_msg);
  auto& from = static_cast<const AlgoOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgoOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.oargs_.MergeFrom(from._impl_.oargs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlgoOutput::CopyFrom(const AlgoOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlgoOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoOutput::IsInitialized() const {
  return true;
}

void AlgoOutput::InternalSwap(AlgoOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.oargs_.InternalSwap(&other->_impl_.oargs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgoOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algo_5fargs_2eproto_getter, &descriptor_table_algo_5fargs_2eproto_once,
      file_level_metadata_algo_5fargs_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AlgoInput_IargsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::AlgoInput_IargsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlgoInput_IargsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AlgoInput*
Arena::CreateMaybeMessage< ::AlgoInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlgoInput >(arena);
}
template<> PROTOBUF_NOINLINE ::AlgoOutput_OargsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::AlgoOutput_OargsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlgoOutput_OargsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AlgoOutput*
Arena::CreateMaybeMessage< ::AlgoOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlgoOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
